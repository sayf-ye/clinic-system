/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.forms.cams;

import com.database.cams.DatabaseManager;
import com.models.cams.Appointment;
import com.models.cams.TimeSlot;
import com.models.cams.User;
import com.shared.cams.Alert;
import com.shared.cams.Helper;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class GUIAppointmentManager extends javax.swing.JFrame {

    /**
     * Creates new form GUIAppointmentManager
     */
    
    static JFrame parentPage;
    static User logger;
    static Appointment appointment = null;
    
    public GUIAppointmentManager(JFrame parentPage,User logger,Appointment appointment) {
        initComponents();
        
        this.parentPage = parentPage;
        this.logger = logger;
        this.appointment = appointment;
        
        GetTimeSlotList();
        GetDoctorList();
    }
    
    private void GetTimeSlotList(){
        cmbApptSlot.removeAllItems();
        ArrayList<TimeSlot> list = DatabaseManager.getTimeSlotByValue(this, "");
        for(TimeSlot slot:list){
            cmbApptSlot.addItem(slot.getStart()+"-"+slot.getEnd());
        }
        
        cmbApptSlot.setSelectedItem(null);
        
        if(appointment != null){
            cmbApptSlot.setSelectedItem(appointment.getStartTime()+"-"+appointment.getEndTime());
        }
    }
    
    private void GetDoctorList(){
        cmbApptDoctor.removeAllItems();
        ArrayList<User> list = DatabaseManager.getUserByValue(this, "","","staff");
        User doctor = null;
        for(User us:list){
            if(appointment != null && us.getId().equals(appointment.getDoctorId())){
                doctor = us;
            }
            cmbApptDoctor.addItem(us.getName()+"-"+us.getId());
        }
        
        cmbApptDoctor.setSelectedItem(null);
        
        if(appointment != null){
            cmbApptDoctor.setSelectedItem(doctor.getName()+"-"+doctor.getId()+"");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dtApptDate = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        cmbApptSlot = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cmbApptDoctor = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CAMS-Appointments");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        btnLogout.setText("Logout");
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        jPanel2.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, -1, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 70));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Complete the following");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Appointment Date");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        dtApptDate.setDateFormatString("dd-MM-yyyy");
        jPanel1.add(dtApptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 220, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Time Slot");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        jPanel1.add(cmbApptSlot, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 210, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Specialist Name");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, -1, -1));

        jPanel1.add(cmbApptDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, 190, 30));

        btnSave.setText("Save");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, 80, -1));

        btnBack.setText("<< Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 710, 180));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        GUILogin gLogin = new GUILogin();
        gLogin.setLocationRelativeTo(null);
        gLogin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        Date appt_date = dtApptDate.getDate(); 
        String valid_message = "";
        
        if(cmbApptSlot.getSelectedItem() == null || appt_date == null || cmbApptDoctor.getSelectedItem() == null){
            valid_message = "Please select all fields";
        }
        
        if(valid_message.length() != 0){
            Alert.showAlert(this, "Warning",valid_message, "w");
            return;
        }
        
        if(appt_date.compareTo(new Date()) < 0){
            valid_message = "Appointment date should not be less or equal to current date";            
        }
        
        if(valid_message.length() != 0){
            Alert.showAlert(this, "Warning",valid_message, "w");
            return;
        }
        
        ArrayList<Appointment> list = DatabaseManager.getAppointmentByValue(this, "",logger.getId(),"");        
        
        String apptDate = Helper.formatDate("dd-MM-yyyy",appt_date);
        String slotStart = cmbApptSlot.getSelectedItem().toString().split("-")[0];
        String slotEnd = cmbApptSlot.getSelectedItem().toString().split("-")[1];
        
        String doctorId = cmbApptDoctor.getSelectedItem().toString().split("-")[1];        
        
        for(Appointment appt: list){
            if(appt.getDate().equals(apptDate) && (appt.getApprovalStatus().equals("Approved") || appt.getApprovalStatus().equals("Pending")) && (appt.getStartTime().equals(slotStart) || appt.getEndTime().equals(slotEnd))){
                valid_message = ((appointment == null) || (appointment != null && !appointment.getAppointmentId().equals(appt.getAppointmentId()))) ? "You already have an appointment on this day":"";
                break;
            }
        }
        
        if(valid_message.length() != 0){
            Alert.showAlert(this, "Warning",valid_message, "w");
            return;
        }
        
        Appointment newAppt;        
        
        if(appointment == null){            
            newAppt = new Appointment(logger.getId(),doctorId,apptDate,slotStart,slotEnd,"Pending");
            newAppt.setAppointmentId("APPT"+Helper.formatDate("yyyyHHssMMmmdd", new Date()));
        }else{
            newAppt = appointment;
            newAppt.setDoctorId(doctorId);
            newAppt.setDate(apptDate);
            newAppt.setStartTime(slotStart);
            newAppt.setEndTime(slotEnd);
        }
        
        int result = Helper.showConfirmDialog(this, "Do you want to "+(appointment != null ? "update":"create")+" appointment details ?");
        if(result == JOptionPane.YES_OPTION){
            boolean add_update_result = false;
            
            if(appointment == null){
                ArrayList<Appointment> newData = new ArrayList<>();
                newData.add(newAppt);
                add_update_result = DatabaseManager.addAppointment(this,newData);
            }else{
                add_update_result = DatabaseManager.updateAppointment(this,newAppt);
            }   
            
            if(add_update_result){
                Alert.showAlert(this,"Info", "Appointment "+(appointment != null ? "updated":"created")+" successfully", "i");
                GUIDashboard gDashboard = new GUIDashboard(logger);
                gDashboard.setLocationRelativeTo(null);
                gDashboard.setVisible(true);
                this.dispose();
            }
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        GUIDashboard gDashboard = new GUIDashboard(logger);
        gDashboard.setLocationRelativeTo(null);
        gDashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIAppointmentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIAppointmentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIAppointmentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIAppointmentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIAppointmentManager(parentPage,logger,appointment).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbApptDoctor;
    private javax.swing.JComboBox<String> cmbApptSlot;
    private com.toedter.calendar.JDateChooser dtApptDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
